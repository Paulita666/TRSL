extract_data = function(sheet) {
# if the score is a BeeEye score
if('confidence' %in% names(sheet)) {
mycolumns = c('confidence', 'Default 0 /1 real')
}
# if the score is an Isracard score
else {
mycolumns = c('financial_rank', 'Default 0 /1 real')
}
df = data.frame(sheet[mycolumns])
colnames(df) = c("score", "default")
df
}
extract_data(allsheets[[1]])
alldata = lapply(allsheets, extract_data)
names(alldata)
for(i in unique(names(alldata))) {
cat("  \n###",  i, "bla\n")
data = alldata[i]
# note that I use the negative of the score to align with the default flag
pred = prediction(-data$score, data$default)
perf = performance(pred, "tpr", "fpr")
plot(perf)
abline(a=0, b=1)
cat("  \n")
}
for(i in unique(names(alldata))) {
cat("  \n###",  i, "bla\n")
data = alldata[[i]]
# note that I use the negative of the score to align with the default flag
pred = prediction(-data$score, data$default)
perf = performance(pred, "tpr", "fpr")
plot(perf)
abline(a=0, b=1)
cat("  \n")
}
for(i in unique(names(alldata))) {
# method 1
library(ROCR)
cat("  \n### ROC analysis for Sheet:",  i, "\n")
data = alldata[[i]]
# note that I use the negative of the score to align with the default flag
pred = prediction(-data$score, data$default)
auc.perf = performance(pred, measure = "auc")
area_under_curve = auc.perf@y.values[[1]]
area_under_curve
accuracy_ratio = 2 * area_under_curve - 1
accuracy_ratio
cat("  \n")
}
for(i in unique(names(alldata))) {
# method 1
library(ROCR)
cat("  \n### ROC analysis for Sheet:",  i, "\n")
data = alldata[[i]]
# note that I use the negative of the score to align with the default flag
pred = prediction(-data$score, data$default)
auc.perf = performance(pred, measure = "auc")
area_under_curve = auc.perf@y.values[[1]]
cat(area_under_curve)
accuracy_ratio = 2 * area_under_curve - 1
accuracy_ratio
cat("  \n")
}
library(readxl)
data = readxl::read_excel("/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx",
sheet = 'Q2 +July model Integrated'))
data = readxl::read_excel("/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx",
sheet = 'Q2 +July model Integrated')
View(data)
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real')]
colnames(data) = c('score_b', 'score_i', 'default')
View(data)
hist(data$score_b)
hist(data$score_b, probability=TRUE)
hist(data$score_b, probability=TRUE, xlab='BeeEye confidence')
hist(data$score_b, probability=TRUE, xlab='BeeEye confidence', main=NULL)
hist(data$score_i, probability=TRUE, xlab='Isracard grade',    main='Frequency distribution of Isracard grade')
hist(data$score_i, breaks=1:10, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
unique(data$score_i)
0:10
hist(data$score_i, breaks=0:10, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
hist(data$score_i, breaks=0:11, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
hist(data$score_i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
data$score.b.norm = scale(data$score.b)
## 1. Import and clean data
#######################################################################################
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real')]
colnames(data) = c('score.b', 'score.i', 'default')
## 2. Univariate distributions
#######################################################################################
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
# TODO: find out meaning of grade 0
## 3. Standardize data
#######################################################################################
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
View(data)
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
w = seq(0.0, 1.0, by=0.1)
w
combine_score = function(a, b, w) {
w * a + (1 - w) * b
}
ws = seq(0.0, 1.0, by=0.1)
combine_score = function(a, b, w) {
w * a + (1 - w) * b
}
score.lin = lapply(data$score.b, data$score.i, ws)
score.lin = apply(data$score.b, data$score.i, ws)
score.lin = apply(data$score.b, data$score.i, ws, combine_score)
score.lin = apply(ws, a=data$score.b, b=data$score.i, combine_score)
score.lin = apply(ws, a=data$score.b, b=data$score.i, FUN=combine_score)
## 1. Import and clean data
#######################################################################################
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real')]
colnames(data) = c('score.b', 'score.i', 'default')
## 2. Univariate distributions
#######################################################################################
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
# TODO: find out meaning of grade 0
## 3. Standardize data
#######################################################################################
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
## 4. Simple linear weights
#######################################################################################
ws = seq(0.0, 1.0, by=0.1)
# function to return the linear combination of two scores a, b with weight w
combine_score = function(w, a, b) {
w * a + (1 - w) * b
}
combine_score(0.1, a=data$score.b, b=data$score.i)
data['w0.1'] = combine_score(0.1, a=data$score.b, b=data$score.i)
View(data)
data['w0.1'] = combine_score(0.1, a=data$score.b.norm, b=data$score.i.norm)
xx = lapply(ws, combine_score, a=data$score.b.norm, b=data$score.i.norm)
## 1. Import and clean data
#######################################################################################
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real')]
colnames(data) = c('score.b', 'score.i', 'default')
## 2. Univariate distributions
#######################################################################################
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
# TODO: find out meaning of grade 0
## 3. Standardize data
#######################################################################################
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
## 4. Simple linear weights
#######################################################################################
# weights over which we iterate the linear combination
ws = seq(0.0, 1.0, by=0.1)
# function to return the linear combination of two scores a, b with weight w
combine_score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine_score, a=data$score.b.norm, b=data$score.i.norm)
library(pROC)
auc(response, score.b.norm)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
lapply(scores.list, auc, response=data$default)
#######################################################################################
## 1. Import and clean data
#######################################################################################
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real')]
colnames(data) = c('score.b', 'score.i', 'default')
#######################################################################################
## 2. Univariate distributions
#######################################################################################
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
# TODO: find out meaning of grade 0
#######################################################################################
## 3. Standardize data
#######################################################################################
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
#######################################################################################
## 4. Simple linear weights
#######################################################################################
# weights over which we iterate the linear combination
ws = seq(0.0, 1.0, by=0.05)
# function to return the linear combination of two scores a, b with weight w
combine_score = function(w, a, b) {
w * a + (1 - w) * b
}
# all weighted scores in one list
scores.list = lapply(ws, combine_score, a=data$score.b.norm, b=data$score.i.norm)
#######################################################################################
## 5. Measure AUCs
#######################################################################################
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
lapply(scores.list, auc, response=data$default)
# optimum is at 0.9 * BeeEye + 0.1 * Isracard
# best AUC = 0.6679
# TODO: make output prettier
#######################################################################################
## 6. Logistic fit with/without subsequent normalization
#######################################################################################
#######################################################################################
## 99. Tomer's suggestion
#######################################################################################
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb_exists')
combine.score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine.score, a=data$score.b.norm, b=data$score.i.norm)
View(combine_score)
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb.exists')
ata$score.b.norm = scale(data$score.b)
d
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auc(data$default, data$score.if.fb)
plot(data$score.b, data$score.i, main="Scatterplot", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data$score.if.fb.no.0 = ifelse(test=data$score.i==0, yes=data$score.b.norm, no=data$score.if.fb)
auc(data$default, data$score.if.fb.no.0)
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data = data[data$score.i!=0]
data = data[data$score.i~=0]
data = data[data$score.i!=0]
data = data[data$score.i!=0, ]
View(data)
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
ws = seq(0.0, 1.0, by=0.05)
combine.score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine.score, a=data$score.b.norm, b=data$score.i.norm)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
lapply(scores.list, auc, response=data$default)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auc(data$default, data$score.if.fb)
data$score.if.fb.no.0 = ifelse(test=data$score.i==0, yes=data$score.b.norm, no=data$score.if.fb)
auc(data$default, data$score.if.fb.no.0)
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb.exists')
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 +July model Integrated')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb.exists')
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
ws = seq(0.0, 1.0, by=0.05)
combine.score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine.score, a=data$score.b.norm, b=data$score.i.norm)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
lapply(scores.list, auc, response=data$default)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auclist = lapply(scores.list, auc, response=data$default)
auclist[1]
auclist[1]$auc
auclist[2]
auclist[3]
auclist[7]
names(auclist) = ws
auclist$`0.25`
print(auclist)
print(auclist)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auc(data$default, data$score.if.fb)
data$score.if.fb.no.0 = ifelse(test=data$score.i==0, yes=data$score.b.norm, no=data$score.if.fb)
auc(data$default, data$score.if.fb.no.0)
model.b = glm(formula = default ~ ., family = binomial(link = 'logit'), data=data$score.b.norm)
typeof(data$score.b.norm)
data$score.b.norm
len(data$score.b.norm)
length(data$score.b.norm)
model.b = glm(formula = default ~ ., family = binomial(link = 'logit'), data=as.data.frame(data$score.b.norm))
model.b = glm(formula = data$default ~ ., family = binomial(link = 'logit'), data=as.data.frame(data$score.b.norm))
data$score.b.norm
model.b = glm(formula = data$default ~ ., family = binomial(link = 'logit'), data=as.data.frame(data$score.b.norm))
model.b
data$logit.b = predict(object = model.b, newdata = data$score.b.norm)
data$logit.b = predict(object = model.b, newdata = as.data.frame(data$score.b.norm))
View(data)
hist(data$logit.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
data$logit.b = predict(object=model.b, newdata=as.data.frame(data$score.b.norm), type='response')
hist(data$logit.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$logit.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of logit-transformed BeeEye confidence')
hist(data$logit.b, probability=TRUE, xlab='Logit-transformed BeeEye confidence', main='Frequency distribution of logit-transformed BeeEye confidence')
model.i = glm(formula=data$default ~ ., family = binomial(link='logit'), data=as.data.frame(data$score.i.norm))
data$logit.i = predict(object=model.i, newdata=as.data.frame(data$score.i.norm), type='response')
hist(data$logit.i, probability=TRUE, xlab='Logit-transformed Isracard grade', main='Frequency distribution of logit-transformed Isracard grade')
scores.logit.list = lapply(ws, combine.score, a=data$logit.b, b=data$logit.i)
auc(data$default, data$logit.b)
auc(data$default, data$logit.i)
auclist.logit = lapply(scores.logit.list, auc, response=data$default)
names(auclist.logit) = ws
print(auclist.logit)
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new.xlsx',
sheet = 'Q2 only model BeeEye ')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new2.xlsx',
sheet = 'Q2 only model BeeEye ')
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new2.xlsx',
sheet = 'Q2 only model BeeEye ')
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new2.xlsx',
sheet = 'Q2 only model BeeEye ')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb.exists')
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
ws = seq(0.0, 1.0, by=0.05)
combine.score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine.score, a=data$score.b.norm, b=data$score.i.norm)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
auclist = lapply(scores.list, auc, response=data$default)
names(auclist) = ws
print(auclist)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auc(data$default, data$score.if.fb)
data$score.if.fb.no.0 = ifelse(test=data$score.i==0, yes=data$score.b.norm, no=data$score.if.fb)
auc(data$default, data$score.if.fb.no.0)
model.b = glm(formula=data$default ~ ., family=binomial(link = 'logit'), data=as.data.frame(data$score.b.norm))
data$logit.b = predict(object=model.b, newdata=as.data.frame(data$score.b.norm), type='response')
hist(data$logit.b, probability=TRUE, xlab='Logit-transformed BeeEye confidence', main='Frequency distribution of logit-transformed BeeEye confidence')
model.i = glm(formula=data$default ~ ., family = binomial(link='logit'), data=as.data.frame(data$score.i.norm))
data$logit.i = predict(object=model.i, newdata=as.data.frame(data$score.i.norm), type='response')
hist(data$logit.i, probability=TRUE, xlab='Logit-transformed Isracard grade', main='Frequency distribution of logit-transformed Isracard grade')
scores.logit.list = lapply(ws, combine.score, a=data$logit.b, b=data$logit.i)
library(pROC)
auclist.logit = lapply(scores.logit.list, auc, response=data$default)
names(auclist.logit) = ws
print(auclist.logit)
auc(data$default, data$score.if.fb)
print(auclist.logit)
library(readxl)
data = readxl::read_excel('/home/martin/Geschäftlich/BeeEye/BeeEye results (Q2 black box test) new2.xlsx',
sheet = 'Q2 only model BeeEye ')
data = data[c('confidence', 'financial_rank', 'Default 0 /1 real', 'fb_exists')]
colnames(data) = c('score.b', 'score.i', 'default', 'fb.exists')
hist(data$score.b, probability=TRUE, xlab='BeeEye confidence', main='Frequency distribution of BeeEye confidence')
hist(data$score.i, breaks=-0.5:10.5, probability=TRUE, xlab='Isracard grade', main='Frequency distribution of Isracard grade')
plot(data$score.b, data$score.i, main="BeeEye confidence vs Isracard grade", xlab="BeeEye confidence", ylab="Isracard grade", pch=19)
data$score.b.norm = scale(data$score.b)
data$score.i.norm = scale(data$score.i)
ws = seq(0.0, 1.0, by=0.05)
combine.score = function(w, a, b) {
w * a + (1 - w) * b
}
scores.list = lapply(ws, combine.score, a=data$score.b.norm, b=data$score.i.norm)
library(pROC)
auc(data$default, data$score.b.norm)
auc(data$default, data$score.i.norm)
auclist = lapply(scores.list, auc, response=data$default)
names(auclist) = ws
print(auclist)
data$score.if.fb = ifelse(test=data$fb.exists==1, yes=data$score.b.norm, no=data$score.i.norm)
auc(data$default, data$score.if.fb)
data$score.if.fb.no.0 = ifelse(test=data$score.i==0, yes=data$score.b.norm, no=data$score.if.fb)
auc(data$default, data$score.if.fb.no.0)
model.b = glm(formula=data$default ~ ., family=binomial(link = 'logit'), data=as.data.frame(data$score.b.norm))
data$logit.b = predict(object=model.b, newdata=as.data.frame(data$score.b.norm), type='response')
hist(data$logit.b, probability=TRUE, xlab='Logit-transformed BeeEye confidence', main='Frequency distribution of logit-transformed BeeEye confidence')
model.i = glm(formula=data$default ~ ., family = binomial(link='logit'), data=as.data.frame(data$score.i.norm))
data$logit.i = predict(object=model.i, newdata=as.data.frame(data$score.i.norm), type='response')
hist(data$logit.i, probability=TRUE, xlab='Logit-transformed Isracard grade', main='Frequency distribution of logit-transformed Isracard grade')
scores.logit.list = lapply(ws, combine.score, a=data$logit.b, b=data$logit.i)
library(pROC)
auclist.logit = lapply(scores.logit.list, auc, response=data$default)
names(auclist.logit) = ws
print(auclist.logit)
install.packages(c("backports", "BH", "doParallel", "evaluate", "knitr", "rlang", "scales", "tibble"))
library("devtools", lib.loc="/usr/lib/R/site-library")
install.packages("devtools")
install.packages("devtools")
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("devtools", lib.loc="/usr/lib/R/site-library")
devtools::install_github("mariodosreis/tai")
setwd("~/git/TRSL/workbooks/analyses/tAI_misc")
setwd("~/git/TRSL/workbooks/analyses/tAI_misc")
require("tAI")
yeast.trna <- scan("yeast.trna")
yeast.ws <- get.ws(tRNA=yeast.trna, sking=1)
yeast.ws <- get.ws(tRNA=yeast.trna, sking=0) # superkingdom, 0 indicating Eukaryota
yeast.trna <- scan("yeast.trna")
yeast.ws <- get.ws(tRNA=yeast.trna, sking=0) # superkingdom, 0 indicating Eukaryota
yeast.m = matrix(scan("yeast.m"), ncol=61, byrow=TRUE)
View(yeast.m)
yeast.m = yeast.m[,-33]
yeast.tai = get.tai(yeast.m, yeast.ws)
hist(yeast.tai)
View(yeast.m)
library(Biostrings)
source("https://bioconductor.org/biocLite.R")
install.packages("Biostrings")
biocLite("Biostrings")
dna = readDNAStringSet("orf_coding.fasta")
library(Biostrings)
dna = readDNAStringSet("orf_coding.fasta")
s = strsplit(names(dna), "[ \t]+") # split names by tab/space
s[1]
s[11]
s[111]
s[1111]
s[5917]
info = matrix(unlist(s), ncol=3, byrow=T)
View(info)
View(info)
gene.names = lapply(s, function(l) l[[1]])
setNames(s, gene.names)
setNames(yeast.tai, gene.names)
yeast.tai
yeast.tai = setNames(yeast.tai, gene.names)
yeast.tai
yeast.tai[1:5]
library(jsonlite)
toJSON(yeast.tai)
yeast.tai = list(setNames(yeast.tai, gene.names))
yeast.tai = get.tai(yeast.m, yeast.ws)
hist(yeast.tai)
library(Biostrings)
dna = readDNAStringSet("orf_coding.fasta")
s = strsplit(names(dna), "[ \t]+") # split names by tab/space
gene.names = lapply(s, function(l) l[[1]])
yeast.tai = setNames(yeast.tai, gene.names)
type(yeast.tai)
?(yeast.tai)
typeof(yeast.tai)
yeast.tai = get.tai(yeast.m, yeast.ws)
hist(yeast.tai)
library(Biostrings)
dna = readDNAStringSet("orf_coding.fasta")
s = strsplit(names(dna), "[ \t]+") # split names by tab/space
gene.names = lapply(s, function(l) l[[1]])
names(yeast.tai) = gene.names
yeast.tai[1]
yeast.tai["YAL001C"]
library(jsonlite)
x = toJSON(yeast.tai)
capture.output(summary(yeast.tai), file = "test.txt")
capture.output(yeast.tai, file="test.txt")
cat(RJSONIO::toJSON(list(yeast.tai)))
myjson = RJSONIO::toJSON(list(yeast.tai))
myjson = RJSONIO::toJSON(list(yeast.tai)[1])
myjson
myjson = RJSONIO::toJSON(list(yeast.tai)[[1]])
myjson
yeast.json = RJSONIO::toJSON(list(yeast.tai)[[1]])
cat(yeast.json)
View(yeast.json)
library(RJSONIO)
yeast.json = toJSON(list(yeast.tai)[[1]])
View(yeast.json)
yeast.json
save(yeast.json, file="yeast.json")
write(yeast.json, file="yeast.json")
